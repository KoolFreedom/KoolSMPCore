package eu.koolfreedom.listener;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import org.apache.commons.lang3.StringUtils;
import org.bukkit.Bukkit;

public class ExploitListener extends PacketAdapter {
    private long lastLogTime = System.currentTimeMillis();

    public ExploitListener(KoolSMPCore plugin) {
        super(plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.CHAT_COMMAND, PacketType.Play.Client.TAB_COMPLETE);
    }

    public void onPacketReceiving(PacketEvent event) {
        if (event.isCancelled())
            return;
        if (event.getPacketType() == PacketType.Play.Client.CHAT_COMMAND) {
            String message = event.getPacket().getStrings().read(0);
            if (!message.isEmpty() && message.isBlank())
                event.setCancelled(true);
        }
        if (event.getPacketType() == PacketType.Play.Client.TAB_COMPLETE) {
            String command = event.getPacket().getStrings().read(0);
            if (command.equals("/") || command.isBlank()) {
                event.setCancelled(true);
                return;
            }
            if (command.contains("nbt") && (
                    StringUtils.countMatches(command, "[") > 15 || StringUtils.countMatches(command, "{") > 25)) {
                event.setCancelled(true);
                long currentTime = System.currentTimeMillis();
                if (currentTime - this.lastLogTime > 1000L) {
                    Bukkit.getLogger().warning("Potential Crash Completion: " + command);
                    this.lastLogTime = currentTime;
                }
                return;
            }
            if (command.length() > 256) {
                event.setCancelled(true);
                long currentTime = System.currentTimeMillis();
                if (currentTime - this.lastLogTime > 1000L) {
                    Bukkit.getLogger().warning("Potential Crash Completion: " + command);
                    this.lastLogTime = currentTime;
                }
            }
        }
    }
}