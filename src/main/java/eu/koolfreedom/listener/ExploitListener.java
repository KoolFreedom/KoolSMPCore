package eu.koolfreedom.listener;


import com.github.retrooper.packetevents.event.PacketListener;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.protocol.player.User;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientChatCommand;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientEditBook;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientSelectBundleItem;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientTabComplete;
import eu.koolfreedom.config.ConfigEntry;
import eu.koolfreedom.util.FLog;
import org.apache.commons.lang3.StringUtils;
import eu.koolfreedom.KoolSMPCore;
import org.bukkit.Bukkit;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.entity.Player;
import org.bukkit.entity.Trident;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ProjectileHitEvent;
import org.bukkit.event.entity.ProjectileLaunchEvent;

import java.util.ArrayList;


public class ExploitListener implements PacketListener, Listener {
    private long lastLogTime = System.currentTimeMillis();
    private final ArrayList<Player> readyTrident = new ArrayList<>();
    public ExploitListener()
    {
        Bukkit.getServer().getPluginManager().registerEvents(this, KoolSMPCore.getInstance());

    }

    public void onPacketReceive(PacketReceiveEvent event)
    {
        if (event.isCancelled() || !ConfigEntry.EXPLOITS_ENABLED.getBoolean())
            return;

        // Reject blank messages
        if (event.getPacketType() == PacketType.Play.Client.CHAT_COMMAND)
        {
            WrapperPlayClientChatCommand chatCommand = new WrapperPlayClientChatCommand(event);
            String message = chatCommand.getCommand();
            if (!message.isEmpty() && message.isBlank() || message.contains("${jndi:"))
                event.setCancelled(true);
        }
        // Reject tab completions if...
        else if (event.getPacketType() == PacketType.Play.Client.TAB_COMPLETE)
        {
            WrapperPlayClientTabComplete tabComplete = new WrapperPlayClientTabComplete(event);
            String command = tabComplete.getText();

            // The command is empty
            if (command.equals("/") || command.isBlank())
            {
                event.setCancelled(true);
            }
            // The command has NBT in it and that reaches a certain threshold or is too long
            else if (ConfigEntry.EXPLOIT_TAB_COMPLETE_ENABLED.getBoolean() &&
                    command.contains("nbt") &&
                    (StringUtils.countMatches(command, "[") > 15 || StringUtils.countMatches(command, "{") > 25) || command.length() > 256)
            {
                event.setCancelled(true);
                long currentTime = System.currentTimeMillis();
                if (currentTime - this.lastLogTime > 1000L)
                {
                    KoolSMPCore.getInstance().getServer().dispatchCommand(Bukkit.getConsoleSender(), ConfigEntry.EXPLOIT_TAB_COMPLETE_PUNISH.getString());

                    FLog.warning("Player " + event.getUser().getName() + " may be trying to crash the server!");
                    this.lastLogTime = currentTime;

                }
            }
        }
        else if (event.getPacketType() == PacketType.Play.Client.EDIT_BOOK){
            // 1.20.4 - 1.21.1 Paper Dupe Exploit
            WrapperPlayClientEditBook editBook = new WrapperPlayClientEditBook(event);
            String bookTitle = editBook.getTitle();

            if (bookTitle != null && bookTitle.length() > 15 && ConfigEntry.EXPLOIT_BOOK_AND_QUILL_ENABLED.getBoolean()){
                if (!ConfigEntry.EXPLOIT_BOOK_AND_QUILL_PUNISH.getString().isEmpty())
                    KoolSMPCore.getInstance().getServer().dispatchCommand(Bukkit.getConsoleSender(), ConfigEntry.EXPLOIT_BOOK_AND_QUILL_PUNISH.getString());
                FLog.warning("Player "+ event.getUser().getName() + " attempted to dupe!");
                event.setCancelled(true);
            }
        } else if (event.getPacketType() == PacketType.Play.Client.SELECT_BUNDLE_ITEM){
            // 1.21.3+ Bundle Crash Exploit
            WrapperPlayClientSelectBundleItem bundleItem = new WrapperPlayClientSelectBundleItem(event);
            if (bundleItem.getSelectedItemIndex() < -1 && ConfigEntry.EXPLOIT_BUNDLE_ENABLED.getBoolean()){
                FLog.warning("Player "+ event.getUser().getName() + " attempted to crash the server!");
                if (!ConfigEntry.EXPLOIT_BUNDLE_PUNISH.getString().isEmpty())
                    KoolSMPCore.getInstance().getServer().dispatchCommand(Bukkit.getConsoleSender(), ConfigEntry.EXPLOIT_BUNDLE_PUNISH.getString());
                event.setCancelled(true);
            }
        } else if (event.getPacketType() == PacketType.Play.Client.CLICK_WINDOW){
            // Trident Dupe Exploit, 1.13+, patched in latest Paper
            if (readyTrident.contains(event.getPlayer()) && ConfigEntry.EXPLOIT_TRIDENT_ENABLED.getBoolean()){
                FLog.warning("Player "+ event.getUser().getName() + " attempted to dupe!");
                if (!ConfigEntry.EXPLOIT_TRIDENT_PUNISH.getString().isEmpty())
                    KoolSMPCore.getInstance().getServer().dispatchCommand(Bukkit.getConsoleSender(), ConfigEntry.EXPLOIT_TRIDENT_PUNISH.getString());
                event.setCancelled(true);
            }
        }
    }

    public void onProjectileCharge(ProjectileLaunchEvent event){
        if (event.getEntity() instanceof Trident && event.getEntity().getShooter() instanceof Player) {
            readyTrident.add((Player)event.getEntity().getShooter());
        }
    }

    public void onProjectileHit(ProjectileHitEvent event){
        if (event.getEntity() instanceof Trident && event.getEntity().getShooter() instanceof Player) {
            readyTrident.remove((Player)event.getEntity().getShooter());
        }
    }
}